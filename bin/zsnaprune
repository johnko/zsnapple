#!/bin/sh
# Copyright (c) 2015, John Ko
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

SNAPLISTTMP=/tmp/zsnaprune

exiterror() {
    exitcode=$1
    shift
    if [ "0" != "${exitcode}" ] && [ "x" == "x${SILENT}" ]; then
        echo "ERROR: ${@}" >&2
    fi
    exit ${exitcode}
}

snapformat() {
    FORMAT="$1"
    case "${FORMAT}" in
        # short format 2 digit for everything in UTC
        short) date -u +%y%m%d-%H%M%S ;;
        # https://www.samba.org/samba/docs/man/manpages/vfs_shadow_copy2.8.html
        *) TZ=GMT date +GMT-%Y.%m.%d-%H.%M.%S ;;
    esac
}

snappattern() {
    FORMAT="$1"
    case "${FORMAT}" in
        short) echo "@[0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]" ;;
        *) echo "@GMT-[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]-[0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" ;;
    esac
}

generatesnapshots() {
    install -d -m 700 ${SNAPLISTTMP}

    zfs list -H -t snapshot -o name -r ${VOLUME} \
        | grep "${SNAPPATTERN}" \
        >${SNAPLISTTMP}/${SAFEVOLUME}.${PREFIX}.${LIMIT}.${SAFEFORMAT}.${RECURSIVE}.txt
}

listsnapshots() {
	cat ${SNAPLISTTMP}/${SAFEVOLUME}.${PREFIX}.${LIMIT}.${SAFEFORMAT}.${RECURSIVE}.txt
}

onlydatepart() {
    FORMAT="$1"
    case "${FORMAT}" in
        short) echo "@${PREFIX}[0-9][0-9][0-9][0-9][0-9][0-9]" ;;
        *) echo "@${PREFIX}GMT-[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" ;;
    esac
}

cleanupsnaps() {
	# if limit is not blank, then maybe need to delete snaps
    if [ "x" != "x${LIMIT}" ]; then
        SNAPPATTERN=`snappattern ${FORMAT}`
        generatesnapshots
        if [ "x" != "x${PREFIX}" ]; then
                COUNT=`listsnapshots | grep -o $(onlydatepart ${FORMAT}) | wc -l`
            TODESTROY=`listsnapshots | grep "${PREFIX}" | head -1`
        else
                COUNT=`listsnapshots | grep -o $(onlydatepart ${FORMAT}) | wc -l`
            TODESTROY=`listsnapshots | head -1`
        fi
        while [ ${COUNT} -gt ${LIMIT} ]; do

            if [ "x" == "x${SILENT}" ]; then
                echo "zfs destroy ${RECURSIVE} ${TODESTROY}"
                      zfs destroy ${RECURSIVE} ${TODESTROY}
            else
                      zfs destroy ${RECURSIVE} ${TODESTROY} >/dev/null 2>&1
            fi

            generatesnapshots
            if [ "x" != "x${PREFIX}" ]; then
                    COUNT=`listsnapshots | grep -o $(onlydatepart ${FORMAT}) | wc -l`
                TODESTROY=`listsnapshots | grep "${PREFIX}" | head -1`
            else
                    COUNT=`listsnapshots | grep -o $(onlydatepart ${FORMAT}) | wc -l`
                TODESTROY=`listsnapshots | head -1`
            fi
        done
    fi
}

usage() {
    cat <<EOF
usage: ${0##*/}
    -f short|shadowcopy         date format
    -h                          help
    -l 7|31|365                 limit of snapshots matching prefix and date format
    -p prefix                   prefix of snapshot
    -q                          quiet / silent
    -r                          recursive snapshots
    -v volume                   zfs dataset or volume to operate on
EOF
}

while getopts f:l:p:v:hqr o; do
	case "$o" in
		f) FORMAT="$OPTARG" ;;
		l) LIMIT="$OPTARG" ;;
		p) PREFIX="$OPTARG" ;;
		v) VOLUME="$OPTARG" ;;
		h) usage; exit 1 ;;
		q) SILENT=1 ;;
		r) RECURSIVE="-r" ;;
		[?]) usage; exit 1 ;;
	esac
done

LIMIT=`echo ${LIMIT} | tr -cd '0-9'`
PREFIX=`echo ${PREFIX} | tr -cd '[:alnum:]._-'`
SNAPNAME=`snapformat ${FORMAT}`
SAFEVOLUME=`echo ${VOLUME} | tr -cd '[:alnum:]._-'`
SAFEFORMAT=`echo ${FORMAT} | tr -cd '[:alnum:]._-'`

if [ "x" == "x${VOLUME}" ]; then
	exiterror 1 "missing -v VOLUME"
fi

if ! zfs list ${VOLUME} >/dev/null 2>/dev/null ; then
    exiterror 1 "$VOLUME doesn't exist"
fi

cleanupsnaps
